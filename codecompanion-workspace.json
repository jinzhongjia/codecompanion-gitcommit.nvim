{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "name": "codecompanion-gitcommit",
  "version": "1.0.0",
  "description": "What functionality would you like to understand in the codecompanion-gitcommit extension?",
  "system_prompt": "You are an expert in the codecompanion-gitcommit.nvim plugin, which is a Neovim extension for CodeCompanion that generates AI-powered Git commit messages following the Conventional Commits specification. You have deep knowledge of its architecture, Git integration, tool system, and AI generation capabilities.",
  "vars": {
    "project_root": "lua/codecompanion/_extensions/gitcommit",
    "tool_path": "${project_root}/tools"
  },
  "groups": [
    {
      "name": "Core System",
      "description": "I need help understanding the core initialization and configuration system of the gitcommit extension",
      "system_prompt": "Focus on the main entry points, extension setup, configuration management, and how the extension integrates with CodeCompanion's ecosystem.",
      "data": ["init", "config", "types"]
    },
    {
      "name": "Git Operations",
      "description": "I need help with Git repository operations and version control functionality",
      "system_prompt": "Focus on Git repository detection, diff analysis, commit operations, branch management, and how the extension interacts with Git commands.",
      "data": ["git-core", "git-read-tool", "git-edit-tool", "git-bot-tool"]
    },
    {
      "name": "AI Generation",
      "description": "I need help with the AI-powered commit message generation system",
      "system_prompt": "Focus on prompt construction, LLM integration, Conventional Commits formatting, multi-language support, and commit history context usage.",
      "data": ["generator", "langs", "init"]
    },
    {
      "name": "User Interface",
      "description": "I need help with the UI components and buffer integration",
      "system_prompt": "Focus on gitcommit buffer handling, keymaps, auto-generation behavior, user interactions, and the commit message preview interface.",
      "data": ["ui", "buffer", "init"]
    },
    {
      "name": "Tools System",
      "description": "I need help understanding the Git tools (@{git_read}, @{git_edit}, @{git_bot}) for chat interactions",
      "system_prompt": "Focus on tool schemas, parameter validation, operation execution, async handling, and how tools integrate with CodeCompanion's chat buffer.",
      "data": ["git-read-tool", "git-edit-tool", "git-bot-tool", "tool-integration"]
    },
    {
      "name": "Documentation",
      "description": "I need help with the documentation, usage examples, and API reference",
      "system_prompt": "Focus on installation instructions, configuration options, usage examples, API documentation, and best practices.",
      "data": ["readme", "readme-zh", "help-doc", "config-examples"]
    },
    {
      "name": "Complete Extension",
      "description": "I need a comprehensive understanding of the entire gitcommit extension",
      "system_prompt": "You have complete knowledge of all aspects of the codecompanion-gitcommit extension, including its architecture, features, configuration, and implementation details.",
      "opts": {
        "remove_config_system_prompt": false
      },
      "data": ["init", "config", "types", "git-core", "generator", "ui", "buffer", "langs", "git-read-tool", "git-edit-tool", "git-bot-tool", "readme", "help-doc"]
    }
  ],
  "data": {
    "init": {
      "type": "file",
      "path": "${project_root}/init.lua",
      "description": "The main entry point for the gitcommit extension. Contains setup logic, command registration, tool initialization, and public API methods."
    },
    "config": {
      "type": "symbols",
      "path": "${project_root}/config.lua",
      "description": "Configuration module defining default options for the extension including adapter settings, language support, buffer behavior, and feature toggles."
    },
    "types": {
      "type": "file",
      "path": "${project_root}/types.lua",
      "description": "Type definitions and annotations for the extension's data structures and function signatures."
    },
    "git-core": {
      "type": "file",
      "path": "${project_root}/git.lua",
      "description": "Core Git operations module handling repository detection, diff generation, commit operations, and Git command execution."
    },
    "generator": {
      "type": "file",
      "path": "${project_root}/generator.lua",
      "description": "AI-powered commit message generation module that constructs prompts, interacts with LLMs, and formats commit messages following Conventional Commits."
    },
    "ui": {
      "type": "file",
      "path": "${project_root}/ui.lua",
      "description": "User interface module for displaying commit messages, handling user input, and managing the commit preview window."
    },
    "buffer": {
      "type": "file",
      "path": "${project_root}/buffer.lua",
      "description": "GitCommit buffer integration module handling keymaps, auto-generation triggers, and buffer-specific behaviors."
    },
    "langs": {
      "type": "symbols",
      "path": "${project_root}/langs.lua",
      "description": "Language selection module supporting multi-language commit message generation."
    },
    "git-read-tool": {
      "type": "file",
      "path": "${tool_path}/git_read.lua",
      "description": "Read-only Git operations tool providing 16 operations like status, log, diff, blame, and branch listing for use in CodeCompanion chat."
    },
    "git-edit-tool": {
      "type": "file",
      "path": "${tool_path}/git_edit.lua",
      "description": "Write-access Git operations tool providing 17 operations like stage, commit, push, and branch management with safety confirmations."
    },
    "git-bot-tool": {
      "type": "file",
      "path": "${tool_path}/git.lua",
      "description": "Comprehensive Git assistant tool combining all read and write operations for natural language Git workflow control."
    },
    "tool-integration": {
      "type": "symbols",
      "path": "${project_root}/init.lua",
      "description": "Tool setup and registration logic showing how Git tools are integrated into CodeCompanion's chat strategy."
    },
    "readme": {
      "type": "file",
      "path": "README.md",
      "description": "Main documentation file with installation instructions, feature overview, usage examples, and configuration options."
    },
    "readme-zh": {
      "type": "file",
      "path": "README_zh.md",
      "description": "Chinese language documentation providing localized installation and usage instructions."
    },
    "help-doc": {
      "type": "file",
      "path": "doc/codecompanion-gitcommit.txt",
      "description": "Vim help documentation with detailed API reference, configuration options, and usage guidelines."
    },
    "config-examples": {
      "type": "symbols",
      "path": "config_example.lua",
      "description": "Example configuration file demonstrating various setup options and customization possibilities."
    }
  }
}