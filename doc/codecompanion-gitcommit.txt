*codecompanion-gitcommit.txt*	For Neovim >= 0.8.0	Last change: 2025 Jun 02

CODECOMPANION GIT COMMIT EXTENSION			*codecompanion-gitcommit*

A CodeCompanion extension that generates AI-powered git commit messages
following the Conventional Commits specification, with advanced Git operations
through the integrated @git_read and @git_edit tools.

==============================================================================
CONTENTS						*codecompanion-gitcommit-contents*

1. Introduction					|codecompanion-gitcommit-intro|
2. Features					|codecompanion-gitcommit-features|
3. Installation					|codecompanion-gitcommit-install|
4. Configuration				|codecompanion-gitcommit-config|
5. Usage					|codecompanion-gitcommit-usage|
6. Commands					|codecompanion-gitcommit-commands|
7. Git Tool Operations				|codecompanion-gitcommit-git-tool|
8. API						|codecompanion-gitcommit-api|
9. File Structure				|codecompanion-gitcommit-structure|
10. Requirements				|codecompanion-gitcommit-requirements|
11. License					|codecompanion-gitcommit-license|

==============================================================================
1. INTRODUCTION					*codecompanion-gitcommit-intro*

The CodeCompanion Git Commit Extension is a powerful tool that leverages AI
to generate meaningful git commit messages following the Conventional Commits
specification. It integrates seamlessly with CodeCompanion's LLM adapters to
analyze your staged changes and create appropriate commit messages.

The extension provides comprehensive Git operations through the @git_read and
@git_edit tools, offering a natural language interface for Git workflow
management within CodeCompanion chat buffers.

==============================================================================
2. FEATURES					*codecompanion-gitcommit-features*

### Core Commit Features
• AI-powered commit message generation using CodeCompanion's LLM adapters
• Interactive UI with copy to clipboard and yank register options
• Conventional Commits specification compliance
• Automatic git repository detection
• Support for both user commands and slash commands
• Smart keymap integration for gitcommit buffers
• Multi-language support for commit messages
• Support for both regular commits and `git commit --amend`
• File filtering support with glob patterns to exclude files from analysis

### Git Tool Features
• @git_read tool - Read-only Git operations through CodeCompanion chat
• @git_edit tool - Write-access Git operations through CodeCompanion chat
• Git status and branch management - Check status, create/switch branches
• Advanced Git operations - Diff, log, blame, stash operations
• Repository insights - Contributors, commit search, remote info
• Safe operations - Automatic approval requirements for destructive operations
• Natural language interface - Control Git through conversation
• Comprehensive Git workflow - From status check to commit in one chat

==============================================================================
3. INSTALLATION					*codecompanion-gitcommit-install*

Add this extension to your CodeCompanion configuration:
>lua
	require("codecompanion").setup({
	  extensions = {
	    gitcommit = {
	      callback = "codecompanion._extensions.gitcommit",
	      opts = {
	        add_slash_command = true, -- Optional: adds /gitcommit slash command
	        adapter = "openai",        -- Optional: specify LLM adapter (defaults to codecompanion chat adapter)
	        model = "gpt-4",          -- Optional: specify model (defaults to codecompanion chat model)
	        languages = { "English", "Chinese", "Japanese" }, -- Optional: list of languages for commit messages
	        exclude_files = { "*.pb.go", "*.min.js", "package-lock.json" }, -- Optional: exclude files from diff analysis
	        add_git_tool = true,       -- Optional: add @git_read and @git_edit tools to CodeCompanion (default: true)
	        add_git_commands = true,   -- Optional: add :CodeCompanionGit commands (default: true)
	        gitcommit_select_count = 100, -- Optional: number of recent commits for /gitcommit slash command (default: 100)
	        buffer = {
	          enabled = true,        -- Enable gitcommit buffer keymaps
	          keymap = "<leader>gc", -- Keymap for generating commit message
	          auto_generate = true,  -- Automatically generate message on entering gitcommit buffer
	          auto_generate_delay = 100, -- Delay in ms before auto-generating
	        }
	      }
	    }
	  }
	})
<

==============================================================================
4. CONFIGURATION				*codecompanion-gitcommit-config*

The extension accepts the following configuration options:
							*codecompanion-gitcommit-opts*
opts = {
  add_slash_command = false, -- Add /gitcommit slash command to chat buffer
  adapter = "openai",        -- LLM adapter to use (optional)
  model = "gpt-4",          -- Model to use (optional)
  languages = { "English", "Chinese", "Japanese" }, -- Languages for commit messages (optional)
  exclude_files = { "*.pb.go", "*.min.js", "package-lock.json" }, -- File patterns to exclude from diff analysis (optional)
  add_git_tool = true,     -- Add @git_read and @git_edit tools to CodeCompanion (default: true)
  add_git_commands = true, -- Add :CodeCompanionGit commands (default: true)
  git_tool_auto_submit_errors = false,  -- Auto-submit git tool errors to LLM (default: false)
  git_tool_auto_submit_success = false, -- Auto-submit git tool success to LLM (default: false)
  gitcommit_select_count = 100, -- Number of recent commits to show in /gitcommit slash command (default: 100)
  buffer = {
    enabled = true,          -- Enable gitcommit buffer keymaps
    keymap = "<leader>gc",   -- Keymap for generating commit message
    auto_generate = false, -- Automatically generate message on entering gitcommit buffer
    auto_generate_delay = 100, -- Delay in ms before auto-generating
  }
}

Configuration Details:

add_slash_command				*gitcommit-add-slash-command*
	Type: boolean
	Default: false
	When enabled, adds `/gitcommit` slash command to CodeCompanion chat
	buffers for generating commit messages within chat sessions.

adapter						*gitcommit-adapter*
	Type: string
	Default: codecompanion chat adapter
	The LLM adapter to use for generating commit messages. If not
	specified, defaults to the adapter configured for CodeCompanion's
	chat strategy.

model						*gitcommit-model*
	Type: string
	Default: codecompanion chat model
	The specific model to use with the adapter. If not specified,
	defaults to the model configured for CodeCompanion's chat strategy.

languages					*gitcommit-languages*
	Type: table
	Default: nil (English only)
	A list of languages that can be used for generating commit messages.
	When specified, the extension will prompt you to select a language
	before generating the commit message. If not provided or empty,
	commit messages will be generated in English by default.
	
	Example: { "English", "Chinese", "Japanese", "French" }

exclude_files					*gitcommit-exclude-files*
	Type: table
	Default: {} (no files excluded)
	A list of file patterns to exclude from git diff analysis when
	generating commit messages. Supports glob patterns using `*` and `?`
	wildcards. This is useful for excluding generated files, minified
	files, or large files that don't need AI analysis.
	
	Examples:
	{ "*.pb.go", "*.min.js", "package-lock.json", "yarn.lock" }
	{ "dist/*", "build/*", "*.generated.ts" }

add_git_tool					*gitcommit-add-git-tool*
	Type: boolean
	Default: true
	When enabled, adds the `@git_read` and `@git_edit` tools to CodeCompanion
	chat buffers. This allows you to perform Git operations through natural
	language in chat sessions.

add_git_commands				*gitcommit-add-git-commands*
	Type: boolean
	Default: true
	When enabled, adds `:CodeCompanionGit` and `:CCGit` commands that
	open a chat buffer with the git tool pre-loaded.

git_tool_auto_submit_errors			*gitcommit-git-tool-auto-submit-errors*
	Type: boolean
	Default: false
	When enabled, automatically submits git tool error messages back to
	the LLM for analysis and suggestions.

git_tool_auto_submit_success			*gitcommit-git-tool-auto-submit-success*
	Type: boolean
	Default: false
	When enabled, automatically submits git tool success messages back to
	the LLM to continue the workflow.

gitcommit_select_count				*gitcommit-gitcommit-select-count*
	Type: number
	Default: 100
	Number of recent commits to show when using the /gitcommit slash command.
	This controls how many commits are available for selection in the
	interactive commit selector.

buffer.enabled					*gitcommit-buffer-enabled*
	Type: boolean
	Default: true
	Controls whether gitcommit buffer keymap integration is enabled.
	When disabled, the extension won't set up keymaps in gitcommit buffers.

buffer.keymap					*gitcommit-buffer-keymap*
	Type: string
	Default: "<leader>gc"
	The keymap used in gitcommit buffers to trigger commit message
	generation. This keymap is only active in buffers with 'gitcommit'
	filetype.

buffer.auto_generate				*gitcommit-buffer-auto-generate*
	Type: boolean
	Default: false
	When `true`, automatically generates a commit message upon entering a
	`gitcommit` buffer, but only if the buffer does not already contain a
	message (to avoid overwriting during an amend).

buffer.auto_generate_delay			*gitcommit-buffer-auto-generate-delay*
	Type: number
	Default: 100
	The delay in milliseconds before the automatic generation is triggered.
	This helps prevent race conditions with other plugins (like `neogit`)
	that manage UI elements. You can increase this value if you experience
	issues.

==============================================================================
5. USAGE					*codecompanion-gitcommit-usage*

There are multiple ways to use this extension:

5.1 User Commands				*codecompanion-gitcommit-user-commands*

Use the provided commands to generate commit messages:
• |:CodeCompanionGitCommit| - Generate git commit message
• |:CCGitCommit| - Short alias for the above command

Use the provided commands for git operations:
• |:CodeCompanionGit| - Open CodeCompanion chat with git assistant
• |:CCGit| - Short alias for git assistant

5.2 GitCommit Buffer Integration		*codecompanion-gitcommit-buffer*

When you run `git commit` or open a gitcommit buffer:
1. If `buffer.auto_generate` is `true`, the commit message will be
   generated and inserted automatically.
2. If `buffer.auto_generate` is `false` (default), press `<leader>gc` (or
   your configured keymap) in normal mode to trigger generation.
3. The generated message will be inserted directly into the commit buffer.

5.3 Slash Command				*codecompanion-gitcommit-slash*

In a CodeCompanion chat buffer, use `/gitcommit` to generate a commit message
(if enabled in configuration).

5.4 Workflow Examples				*codecompanion-gitcommit-workflows*

Traditional Workflow:~
1. Stage your changes with `git add`
2. Run |:CodeCompanionGitCommit|
3. Review the generated commit message in the floating window
4. Choose an action:
   • `c` - Copy to clipboard
   • `y` - Copy to yank register
   • `s` - Submit (commit changes)
   • `Enter` - Copy and close
   • `q/Esc` - Close without action

GitCommit Buffer Workflow:~
1. Stage your changes with `git add`
2. Run `git commit` to open the commit buffer
3. If `auto_generate` is enabled, the message appears automatically.
   Otherwise, press `<leader>gc` in normal mode to generate it.
4. The AI-generated message will be inserted into the buffer
5. Edit if needed and save to complete the commit

Amend Workflow:~
1. Make additional changes to your files
2. Stage changes with `git add` (optional, for new changes)
3. Run `git commit --amend` to open the amend buffer
4. Press `<leader>gc` in normal mode to generate an updated commit message
5. The extension will analyze the full commit changes and generate an
   appropriate message
6. Edit if needed and save to complete the amend

5.5 Interactive Keymaps				*codecompanion-gitcommit-keymaps*

When the floating window is displayed with the generated commit message,
the following keymaps are available:

`c`						*gitcommit-keymap-c*
	Copy the commit message to the system clipboard. This uses the `+`
	register and also copies to `*` register if clipboard support is
	available.

`y`						*gitcommit-keymap-y*
	Copy the commit message to Vim's default yank register (`"`). This
	allows you to paste the message using `p` or `P` commands within Vim.

`s`						*gitcommit-keymap-s*
	Submit the commit message immediately. This will execute `git commit`
	with the generated message and close the floating window if successful.

`<Enter>`					*gitcommit-keymap-enter*
	Copy the commit message to clipboard (same as `c`) and close the
	floating window.

`q` or `<Esc>`					*gitcommit-keymap-q*
	Close the floating window without taking any action.

5.6 File Filtering				*codecompanion-gitcommit-filtering*

The extension supports filtering files from diff analysis using glob
patterns. This is useful to exclude files that don't contribute meaningful
information to commit message generation:

Common Use Cases:~
• Generated files (protobuf, generated code)
• Minified files (*.min.js, *.min.css)
• Lock files (package-lock.json, yarn.lock)
• Build artifacts (dist/, build/)
• Binary files or large data files

Example configuration:~
>
	exclude_files = {
	  "*.pb.go",           -- Protocol buffer files
	  "*.min.js",          -- Minified JavaScript
	  "*.min.css",         -- Minified CSS
	  "package-lock.json", -- NPM lock file
	  "yarn.lock",         -- Yarn lock file
	  "dist/*",            -- Distribution directory
	  "build/*",           -- Build directory
	  "*.generated.*",     -- Any generated files
	}
<

Glob Pattern Support:~
• `*` - Matches any sequence of characters
• `?` - Matches any single character
• `dir/*` - Matches all files in directory
• `*.ext` - Matches all files with extension

==============================================================================
6. COMMANDS					*codecompanion-gitcommit-commands*

:CodeCompanionGitCommit				*:CodeCompanionGitCommit*
	Generate an AI-powered git commit message based on staged changes.
	Opens an interactive floating window with the generated message and
	options to copy or commit.

:CCGitCommit					*:CCGitCommit*
	Short alias for |:CodeCompanionGitCommit|.

:CodeCompanionGit				*:CodeCompanionGit*
	Open CodeCompanion chat buffer for Git assistance.

:CCGit						*:CCGit*
	Short alias for |:CodeCompanionGit|.

==============================================================================
7. GIT TOOL OPERATIONS				*codecompanion-gitcommit-git-tool*

The @git_read and @git_edit tools provide comprehensive Git operations
through natural language commands within CodeCompanion chat buffers.

7.1 Interactive Git Assistant			*codecompanion-gitcommit-git-assistant*

Use |:CodeCompanionGit| or |:CCGit| to open a CodeCompanion chat buffer.
From there, you can use `@git_read` for read-only operations or `@git_edit`
for operations that modify the repository.

7.2 Chat Integration				*codecompanion-gitcommit-chat-integration*

In any CodeCompanion chat buffer, use `@git_read` or `@git_edit` to perform
Git operations:
>
	@git_read help                    # Show available read-only operations
	@git_read status                  # Show git status
	@git_read log --count 5           # Show last 5 commits
	@git_read diff --staged           # Show staged changes
	@git_read branch                  # List all branches

	@git_edit help                    # Show available write-access operations
	@git_edit create_branch --branch_name feature/new-ui
	@git_edit stage --files ["src/main.lua", "README.md"]
	@git_edit stash --message "Work in progress"
<

7.3 Git Tool Commands Reference		*codecompanion-gitcommit-git-commands*

@git_read: Read-only Git Operations~

Repository Status & Info~
• `@git_read status` - Show repository status
• `@git_read log [--count N] [--format FORMAT]` - Show commit history
• `@git_read branch [--remote_only]` - List branches
• `@git_read remotes` - Show remote repositories
• `@git_read contributors [--count N]` - Show top contributors
• `@git_read show [--commit_hash HASH]` - Show commit details
• `@git_read diff_commits --commit1 HASH1 [--commit2 HASH2] [--file_path PATH]` - Compare commits
• `@git_read search_commits --pattern "PATTERN" [--count N]` - Search commits
• `@git_read stash_list` - List all stashes
• `@git_read blame --file_path PATH [--line_start N] [--line_end N]` - Show blame info
• `@git_read gitignore_get` - View current .gitignore content
• `@git_read gitignore_check --gitignore_file "FILE"` - Check if file is ignored
• `@git_read tags` - List all tags

@git_edit: Write-access Git Operations~

File Operations~
• `@git_edit stage --files ["file1", "file2"]` - Stage files
• `@git_edit unstage --files ["file1", "file2"]` - Unstage files

Branch Management~
• `@git_edit create_branch --branch_name NAME [--checkout BOOL]` - Create new branch
• `@git_edit checkout --target BRANCH_OR_COMMIT` - Switch branch/commit

Stash Operations~
• `@git_edit stash [--message "MSG"] [--include_untracked]` - Stash changes
• `@git_edit apply_stash [--stash_ref "stash@{0}"]` - Apply stash

Tag Management~
• `@git_edit create_tag --tag_name NAME [--tag_message "MSG"] [--tag_commit_hash HASH]` - Create a new tag
• `@git_edit delete_tag --tag_name NAME [--remote REMOTE]` - Delete a tag (from local and optionally remote)

Advanced Operations~ (require approval)
• `@git_edit reset --commit_hash HASH [--mode soft|mixed|hard]` - Reset to commit

GitIgnore Management~
• `@git_edit gitignore_add --gitignore_rule "RULE"` - Add rule to .gitignore
• `@git_edit gitignore_add --gitignore_rules ["rule1", "rule2"]` - Add multiple rules
• `@git_edit gitignore_remove: Remove rule from .gitignore
• `@git_edit push: Push changes to a remote repository (WARNING: force push is dangerous)
• `@git_edit rebase: Rebase current branch (WARNING: interactive rebase is dangerous)
• `@git_edit cherry_pick: Apply changes from existing commits
• `@git_edit revert: Revert a commit
• `@git_edit push [--remote REMOTE] [--branch BRANCH] [--force BOOL] [--tags BOOL] [--tag_name NAME]` - Push changes to a remote repository.
  WARNING: `force` push is dangerous and can overwrite remote history. Use with extreme caution.

7.4 Safety Features				*codecompanion-gitcommit-safety*

The git tools include automatic safety features:
• Read-only operations (via `@git_read`) do not require approval.
• Modifying operations (via `@git_edit`) require user confirmation.
• Repository validation ensures you're in a valid Git repository.
• Comprehensive error handling with helpful error messages.

7.5 Example Workflows				*codecompanion-gitcommit-git-workflows*

Code Review Workflow:~
>
	@git_read status
	@git_read diff --staged
	/gitcommit  # Generate commit message
<

Branch Management:~
>
	@git_read branch
	@git_edit create_branch --branch_name feature/new-ui
	# ... make changes ...
	@git_edit stage --files ["src/ui.lua"]
	@git_read status
<

Investigation Workflow:~
>
	@git_read log --count 10
	@git_read show --commit_hash abc123
	@git_read blame --file_path src/main.lua --line_start 50 --line_end 60
<

GitIgnore Management Workflow:~
>
	@git_read gitignore_get                              # View current .gitignore
	@git_edit gitignore_add --gitignore_rule "*.log"     # Add single rule
	@git_edit gitignore_add --gitignore_rules ["dist/", "build/", "*.tmp"] # Add multiple rules
	@git_read gitignore_check --gitignore_file "temp.log" # Check if file is ignored
	@git_edit gitignore_remove --gitignore_rule "*.log"  # Remove rule
<

==============================================================================
8. API						*codecompanion-gitcommit-api*

The extension provides a programmatic API for advanced usage:

gitcommit.generate({lang}, {callback})		*gitcommit.generate()*
	Generate a commit message asynchronously with optional language support.
	
	Parameters:~
		{lang}		string|nil: Language to generate commit message in
				(optional, uses default if nil)
		{callback}	function: Callback function that receives
				(result, error) parameters

	Example:~
>lua
		local gitcommit = require("codecompanion").extensions.gitcommit
		
		-- Generate with specific language
		gitcommit.generate("Chinese", function(result, error)
		  if error then
		    print("Error:", error)
		  else
		    print("Generated:", result)
		  end
		end)
		
		-- Generate with default language
		gitcommit.generate(nil, function(result, error)
		  if error then
		    print("Error:", error)
		  else
		    print("Generated:", result)
		  end
		end)
<

gitcommit.is_git_repo()				*gitcommit.is_git_repo()*
	Check if the current directory is within a git repository.
	
	Returns:~
		boolean: true if in a git repository, false otherwise

gitcommit.get_staged_diff()			*gitcommit.get_staged_diff()*
	Get the diff of staged changes.
	
	Returns:~
		string: The staged diff output

gitcommit.commit_changes({message})		*gitcommit.commit_changes()*
	Commit staged changes with the provided message.
	
	Parameters:~
		{message}	string: The commit message
	
	Returns:~
		boolean: true if commit was successful, false otherwise

gitcommit.get_buffer_config()			*gitcommit.get_buffer_config()*
	Get the current buffer configuration.
	
	Returns:~
		table: Configuration table with buffer settings

Git Tool API					*gitcommit.git_tool_api()*
	Access to git tool functions for programmatic usage.

gitcommit.git_tool.status()			*gitcommit.git_tool.status()*
	Get git status.
	
	Returns:~
		boolean, string: success, output

gitcommit.git_tool.log({count}, {format})	*gitcommit.git_tool.log()*
	Get git log with specified format and count.
	
	Parameters:~
		{count}		number: Number of commits (optional)
		{format}	string: Log format (optional)
	
	Returns:~
		boolean, string: success, output

gitcommit.git_tool.diff({staged}, {file})	*gitcommit.git_tool.diff()*
	Get git diff for staged or unstaged changes.
	
	Parameters:~
		{staged}	boolean: Show staged changes (optional)
		{file}		string: Specific file (optional)
	
	Returns:~
		boolean, string: success, output

gitcommit.git_tool.branches({remote_only})	*gitcommit.git_tool.branches()*
	Get all branches.
	
	Parameters:~
		{remote_only}	boolean: Show only remote branches (optional)
	
	Returns:~
		boolean, string: success, output

gitcommit.git_tool.stage({files})		*gitcommit.git_tool.stage()*
	Stage files.
	
	Parameters:~
		{files}		string|table: Files to stage
	
	Returns:~
		boolean, string: success, output

gitcommit.git_tool.create_branch({name}, {checkout}) *gitcommit.git_tool.create_branch()*
	Create new branch.
	
	Parameters:~
		{name}		string: Branch name
		{checkout}	boolean: Whether to checkout (optional)
	
	Returns:~
		boolean, string: success, output

	Example:~
>lua
		local gitcommit = require("codecompanion").extensions.gitcommit
		
		-- Basic operations
		local success, output = gitcommit.git_tool.status()
		local success, branches = gitcommit.git_tool.branches()
		local success, log = gitcommit.git_tool.log(5, "oneline")
		
		-- File operations
		local success, diff = gitcommit.git_tool.diff(true) -- staged diff
		gitcommit.git_tool.stage({"src/main.lua", "README.md"})
		
		-- Branch operations
		gitcommit.git_tool.create_branch("feature/new-feature", true)
		gitcommit.git_tool.checkout("main")
<

==============================================================================
9. FILE STRUCTURE				*codecompanion-gitcommit-structure*

The extension consists of the following modules:

lua/codecompanion/_extensions/gitcommit/
├── init.lua        # Main extension entry point and command registration
├── git.lua         # Git operations (repository detection, diff, commit, amend support)
├── generator.lua   # LLM integration for commit message generation
├── ui.lua          # Floating window UI and interactions
├── buffer.lua      # GitCommit buffer keymap integration
├── langs.lua       # Language selection functionality
├── types.lua       # Type definitions and TypeScript-style annotations
└── tools/          # Git tool implementations
    ├── git.lua     # Core git operations and command execution
    ├── git_read.lua # CodeCompanion chat tool for read-only Git operations
    └── git_edit.lua # CodeCompanion chat tool for write-access Git operations

Module Overview:~

git.lua~
	Handles all git-related operations including repository detection,
	staged changes retrieval, file filtering with glob patterns,
	commit execution, and `git commit --amend` support. Includes
	contextual diff analysis and error handling.

generator.lua~
	Manages LLM interaction including prompt creation for commit message
	generation with language support, API communication with CodeCompanion
	adapters, response handling, and adapter/model configuration.

ui.lua~
	Provides interactive user interface including floating window display
	with markdown formatting, interactive keyboard shortcuts, copy to
	clipboard and yank register functionality, and responsive window sizing.

buffer.lua~
	Handles gitcommit buffer integration including automatic keymap setup
	for gitcommit filetype, smart commit message insertion at correct
	position, buffer content management, and language selection integration.

langs.lua~
	Manages language selection functionality including multi-language
	support configuration, interactive language selection UI, and
	language preference handling.

types.lua~
	Provides TypeScript-style type annotations for Lua including interface
	definitions for all modules and configuration option types.

init.lua~
	Main extension coordinator that handles module integration, dependency
	management, command registration, slash command integration, and
	extension exports for programmatic usage. Also manages git tool
	integration and command setup.

tools/git.lua~
	Core git operations engine providing safe git command execution with
	error handling, repository validation and detection, git status, log,
	diff, and branch operations, file staging/unstaging and blame information,
	stash management and commit operations, branch creation, checkout, and
	management, repository insights (contributors, remotes, commit search),
	and reset operations with safety checks.

tools/git_read.lua~
	CodeCompanion chat tool integration providing OpenAI-compatible function
	calling schema, natural language interface for read-only git operations,
	comprehensive parameter validation and handling, formatted output for chat
	buffer display, and integration with CodeCompanion's agent system.

tools/git_edit.lua~
	CodeCompanion chat tool integration providing OpenAI-compatible function
	calling schema, natural language interface for write-access git operations,
	comprehensive parameter validation and handling, formatted output for chat
	buffer display, approval system for destructive operations, error handling
	and user feedback, and integration with CodeCompanion's agent system.

==============================================================================
10. REQUIREMENTS				*codecompanion-gitcommit-requirements*

• Neovim >= 0.8.0
• CodeCompanion plugin installed and configured
• Git repository with staged changes
• Configured LLM adapter in CodeCompanion

==============================================================================
11. LICENSE					*codecompanion-gitcommit-license*

This extension follows the same license as the CodeCompanion plugin.

==============================================================================
vim:tw=78:ts=8:noet:ft=help:norl:
