*codecompanion-gitcommit.txt*	For Neovim >= 0.8.0	Last change: 2025 Jun 02

CODECOMPANION GIT COMMIT EXTENSION			*codecompanion-gitcommit*

A CodeCompanion extension that generates AI-powered git commit messages 
following the Conventional Commits specification.

==============================================================================
CONTENTS						*codecompanion-gitcommit-contents*

1. Introduction					|codecompanion-gitcommit-intro|
2. Features					|codecompanion-gitcommit-features|
3. Installation					|codecompanion-gitcommit-install|
4. Configuration				|codecompanion-gitcommit-config|
5. Usage					|codecompanion-gitcommit-usage|
6. Commands					|codecompanion-gitcommit-commands|
7. API						|codecompanion-gitcommit-api|
8. File Structure				|codecompanion-gitcommit-structure|
9. Requirements					|codecompanion-gitcommit-requirements|
10. License					|codecompanion-gitcommit-license|

==============================================================================
1. INTRODUCTION					*codecompanion-gitcommit-intro*

The CodeCompanion Git Commit Extension is a powerful tool that leverages AI
to generate meaningful git commit messages following the Conventional Commits
specification. It integrates seamlessly with CodeCompanion's LLM adapters to
analyze your staged changes and create appropriate commit messages.

==============================================================================
2. FEATURES					*codecompanion-gitcommit-features*

• AI-powered commit message generation using CodeCompanion's LLM adapters
• Interactive UI with copy to clipboard and yank register options
• Conventional Commits specification compliance
• Automatic git repository detection
• Support for both user commands and slash commands
• Smart keymap integration for gitcommit buffers
• Multi-language support for commit messages
• Support for both regular commits and `git commit --amend`

==============================================================================
3. INSTALLATION					*codecompanion-gitcommit-install*

Add this extension to your CodeCompanion configuration:
>lua
	require("codecompanion").setup({
	  extensions = {
	    gitcommit = {
	      callback = "codecompanion._extensions.gitcommit",
	      opts = {
	        add_slash_command = true, -- Optional: adds /gitcommit slash command
	        adapter = "openai",        -- Optional: specify LLM adapter (defaults to codecompanion chat adapter)
	        model = "gpt-4",          -- Optional: specify model (defaults to codecompanion chat model)
	        languages = { "English", "Chinese", "Japanese" }, -- Optional: list of languages for commit messages
	        buffer = {
	          enabled = true,        -- Enable gitcommit buffer keymaps
	          keymap = "<leader>gc", -- Keymap for generating commit message
	        }
	      }
	    }
	  }
	})
<

==============================================================================
4. CONFIGURATION				*codecompanion-gitcommit-config*

The extension accepts the following configuration options:						*codecompanion-gitcommit-opts*
opts = {
  add_slash_command = false, -- Add /gitcommit slash command to chat buffer
  adapter = "openai",        -- LLM adapter to use (optional)
  model = "gpt-4",          -- Model to use (optional)
  languages = { "English", "简体中文", "日本語" }, -- Languages for commit messages (optional)
  buffer = {
    enabled = true,          -- Enable gitcommit buffer keymaps
    keymap = "<leader>gc",   -- Keymap for generating commit message
  }
}

Configuration Details:

add_slash_command				*gitcommit-add-slash-command*
	Type: boolean
	Default: false
	When enabled, adds `/gitcommit` slash command to CodeCompanion chat 
	buffers for generating commit messages within chat sessions.

adapter						*gitcommit-adapter*
	Type: string
	Default: codecompanion chat adapter
	The LLM adapter to use for generating commit messages. If not 
	specified, defaults to the adapter configured for CodeCompanion's 
	chat strategy.

model						*gitcommit-model*
	Type: string
	Default: codecompanion chat model
	The specific model to use with the adapter. If not specified, 
	defaults to the model configured for CodeCompanion's chat strategy.

languages					*gitcommit-languages*
	Type: table
	Default: nil (English only)
	A list of languages that can be used for generating commit messages.
	When specified, the extension will prompt you to select a language 
	before generating the commit message. If not provided or empty, 
	commit messages will be generated in English by default.
	
	Example: { "English", "简体中文", "日本語", "Français" }

buffer.enabled					*gitcommit-buffer-enabled*
	Type: boolean
	Default: true
	Controls whether gitcommit buffer keymap integration is enabled.
	When disabled, the extension won't set up keymaps in gitcommit buffers.

buffer.keymap					*gitcommit-buffer-keymap*
	Type: string
	Default: "<leader>gc"
	The keymap used in gitcommit buffers to trigger commit message 
	generation. This keymap is only active in buffers with 'gitcommit' 
	filetype.

==============================================================================
5. USAGE					*codecompanion-gitcommit-usage*

There are multiple ways to use this extension:

5.1 User Commands				*codecompanion-gitcommit-user-commands*

Use the provided commands to generate commit messages:
• |:CodeCompanionGitCommit| - Generate git commit message
• |:CCGitCommit| - Short alias for the above command

5.2 GitCommit Buffer Integration		*codecompanion-gitcommit-buffer*

When you run `git commit` or open a gitcommit buffer:
1. Press `<leader>gc` (or your configured keymap) in normal mode
2. The extension will automatically generate a commit message based on 
   staged changes
3. The generated message will be inserted directly into the commit buffer

5.3 Slash Command				*codecompanion-gitcommit-slash*

In a CodeCompanion chat buffer, use `/gitcommit` to generate a commit message
(if enabled in configuration).

5.4 Workflow Examples				*codecompanion-gitcommit-workflows*

Traditional Workflow:~
1. Stage your changes with `git add`
2. Run |:CodeCompanionGitCommit|
3. Review the generated commit message in the floating window
4. Choose an action:
   • `c` - Copy to clipboard
   • `y` - Copy to yank register
   • `s` - Submit (commit changes)
   • `Enter` - Copy and close
   • `q/Esc` - Close without action

GitCommit Buffer Workflow:~
1. Stage your changes with `git add`
2. Run `git commit` to open the commit buffer
3. Press `<leader>gc` in normal mode to generate commit message
4. The AI-generated message will be inserted into the buffer
5. Edit if needed and save to complete the commit

Amend Workflow:~
1. Make additional changes to your files
2. Stage changes with `git add` (optional, for new changes)
3. Run `git commit --amend` to open the amend buffer
4. Press `<leader>gc` in normal mode to generate an updated commit message
5. The extension will analyze the full commit changes and generate an 
   appropriate message
6. Edit if needed and save to complete the amend

5.5 Interactive Keymaps				*codecompanion-gitcommit-keymaps*

When the floating window is displayed with the generated commit message,
the following keymaps are available:

`c`						*gitcommit-keymap-c*
	Copy the commit message to the system clipboard. This uses the `+` 
	register and also copies to `*` register if clipboard support is 
	available.

`y`						*gitcommit-keymap-y*
	Copy the commit message to Vim's default yank register (`"`). This
	allows you to paste the message using `p` or `P` commands within Vim.

`s`						*gitcommit-keymap-s*
	Submit the commit message immediately. This will execute `git commit`
	with the generated message and close the floating window if successful.

`<Enter>`					*gitcommit-keymap-enter*
	Copy the commit message to clipboard (same as `c`) and close the 
	floating window.

`q` or `<Esc>`					*gitcommit-keymap-q*
	Close the floating window without taking any action.

==============================================================================
6. COMMANDS					*codecompanion-gitcommit-commands*

:CodeCompanionGitCommit				*:CodeCompanionGitCommit*
	Generate an AI-powered git commit message based on staged changes.
	Opens an interactive floating window with the generated message and
	options to copy or commit.

:CCGitCommit					*:CCGitCommit*
	Short alias for |:CodeCompanionGitCommit|.

==============================================================================
7. API						*codecompanion-gitcommit-api*

The extension provides a programmatic API for advanced usage:

gitcommit.generate({lang}, {callback})		*gitcommit.generate()*
	Generate a commit message asynchronously with optional language support.
	
	Parameters:~
		{lang}		string|nil: Language to generate commit message in
				(optional, uses default if nil)
		{callback}	function: Callback function that receives
				(result, error) parameters

	Example:~
>lua
		local gitcommit = require("codecompanion").extensions.gitcommit
		
		-- Generate with specific language
		gitcommit.generate("简体中文", function(result, error)
		  if error then
		    print("Error:", error)
		  else
		    print("Generated:", result)
		  end
		end)
		
		-- Generate with default language
		gitcommit.generate(nil, function(result, error)
		  if error then
		    print("Error:", error)
		  else
		    print("Generated:", result)
		  end
		end)
<

gitcommit.is_git_repo()				*gitcommit.is_git_repo()*
	Check if the current directory is within a git repository.
	
	Returns:~
		boolean: true if in a git repository, false otherwise

gitcommit.get_staged_diff()			*gitcommit.get_staged_diff()*
	Get the diff of staged changes.
	
	Returns:~
		string: The staged diff output

gitcommit.commit_changes({message})		*gitcommit.commit_changes()*
	Commit staged changes with the provided message.
	
	Parameters:~
		{message}	string: The commit message
	
	Returns:~
		boolean: true if commit was successful, false otherwise

gitcommit.get_buffer_config()			*gitcommit.get_buffer_config()*
	Get the current buffer configuration.
	
	Returns:~
		table: Configuration table with buffer settings

==============================================================================
8. FILE STRUCTURE				*codecompanion-gitcommit-structure*

The extension consists of the following modules:

lua/codecompanion/_extensions/gitcommit/
├── init.lua        # Main extension entry point and command registration
├── git.lua         # Git operations (repository detection, diff, commit, amend support)
├── generator.lua   # LLM integration for commit message generation
├── ui.lua          # Floating window UI and interactions
├── buffer.lua      # GitCommit buffer keymap integration
├── langs.lua       # Language selection functionality
└── types.lua       # Type definitions and TypeScript-style annotations

Module Overview:~

git.lua~
	Handles all git-related operations including repository detection,
	staged changes retrieval, commit execution, and `git commit --amend`
	support. Includes contextual diff analysis and error handling.

generator.lua~
	Manages LLM interaction including prompt creation for commit message
	generation with language support, API communication with CodeCompanion 
	adapters, response handling, and adapter/model configuration.

ui.lua~
	Provides interactive user interface including floating window display
	with markdown formatting, interactive keyboard shortcuts, copy to 
	clipboard and yank register functionality, and responsive window sizing.

buffer.lua~
	Handles gitcommit buffer integration including automatic keymap setup
	for gitcommit filetype, smart commit message insertion at correct 
	position, buffer content management, and language selection integration.

langs.lua~
	Manages language selection functionality including multi-language 
	support configuration, interactive language selection UI, and 
	language preference handling.

types.lua~
	Provides TypeScript-style type annotations for Lua including interface
	definitions for all modules and configuration option types.

init.lua~
	Main extension coordinator that handles module integration, dependency
	management, command registration, slash command integration, and 
	extension exports for programmatic usage.

==============================================================================
9. REQUIREMENTS					*codecompanion-gitcommit-requirements*

• Neovim >= 0.8.0
• CodeCompanion plugin installed and configured
• Git repository with staged changes
• Configured LLM adapter in CodeCompanion

==============================================================================
10. LICENSE					*codecompanion-gitcommit-license*

This extension follows the same license as the CodeCompanion plugin.

==============================================================================
vim:tw=78:ts=8:noet:ft=help:norl:
