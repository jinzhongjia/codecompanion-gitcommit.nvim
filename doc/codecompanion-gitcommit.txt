*codecompanion-gitcommit.txt*	For Neovim >= 0.8.0	Last change: 2025 Sep 30

CODECOMPANION GITCOMMIT EXTENSION			*codecompanion-gitcommit*

A Neovim plugin extension for CodeCompanion that generates AI-powered Git
commit messages following the Conventional Commits specification, with
comprehensive Git workflow integration.

IMPORTANT: As of CodeCompanion v17.5.0, variables and tools must be wrapped
in curly braces, such as `@{git_read}` or `#{buffer}`.

==============================================================================
CONTENTS						*codecompanion-gitcommit-contents*

1. Introduction					|codecompanion-gitcommit-intro|
2. Features					|codecompanion-gitcommit-features|
3. Installation					|codecompanion-gitcommit-install|
4. Usage					|codecompanion-gitcommit-usage|
5. Commands					|codecompanion-gitcommit-commands|
6. Git Tools					|codecompanion-gitcommit-git-tools|
7. AI Release Notes				|codecompanion-gitcommit-ai-release-notes|
8. Configuration				|codecompanion-gitcommit-config|
9. Programmatic API				|codecompanion-gitcommit-api|
10. License					|codecompanion-gitcommit-license|

==============================================================================
1. INTRODUCTION					*codecompanion-gitcommit-intro*

The CodeCompanion GitCommit Extension is a powerful Neovim plugin that
leverages AI to generate meaningful Git commit messages following the
Conventional Commits specification. It integrates seamlessly with
CodeCompanion's LLM adapters to analyze your staged changes and create
appropriate commit messages.

The extension provides comprehensive Git operations through @{git_read} (16 read
operations), @{git_edit} (17 write operations), @{ai_release_notes} (AI-powered
release notes generation), and @{git_bot} tools, offering a natural language
interface for Git workflow management within CodeCompanion chat buffers.

==============================================================================
2. FEATURES					*codecompanion-gitcommit-features*

🤖 AI Commit Generation
• Generate commit messages using CodeCompanion's LLM adapters
• Conventional Commits specification compliance
• Multi-language support for commit messages
• Support for regular commits and amend commits
• Smart diff analysis with file filtering capabilities
• Commit history context for consistent styling and patterns

🛠️ Git Tool Integration
• @{git_read} tool - 16 read-only Git operations (status, log, diff, release notes, etc.)
• @{git_edit} tool - 17 write-access Git operations (stage, commit, push, etc.)
• @{ai_release_notes} tool - AI-powered release notes generation with multiple styles
• @{git_bot} tool - Comprehensive Git assistant combining all operations
• Natural language interface for Git workflow control
• Async operations with proper error handling
• Safety confirmations for destructive operations

📝 Smart Integration
• GitCommit buffer keymap integration with auto-generation
• Automatic Git repository detection
• Slash commands (/gitcommit) for chat integration
• Configurable file filtering using glob patterns
• Programmable API for external integrations

==============================================================================
3. INSTALLATION					*codecompanion-gitcommit-install*

Add this extension to your CodeCompanion configuration:
>lua
	require("codecompanion").setup({
	  extensions = {
	    gitcommit = {
	      callback = "codecompanion._extensions.gitcommit",
	      opts = {
	        -- Basic configuration
	        adapter = "openai",                    -- LLM adapter
	        model = "gpt-4",                      -- Model name
	        languages = { "English", "Chinese", "Japanese", "French" }, -- Supported languages
	        
	        -- File filtering (optional)
	        exclude_files = { 
	          "*.pb.go", "*.min.js", "*.min.css", "package-lock.json",
	          "yarn.lock", "*.log", "dist/*", "build/*", ".next/*",
	          "node_modules/*", "vendor/*"
	        },
	        
	        -- Buffer integration
	        buffer = {
	          enabled = true,              -- Enable gitcommit buffer keymaps
	          keymap = "<leader>gc",       -- Keymap for generating commit messages
	          auto_generate = true,        -- Auto-generate on buffer enter
	          auto_generate_delay = 200,   -- Auto-generation delay (ms)
	          skip_auto_generate_on_amend = true, -- Skip auto-generation during git commit --amend
	        },
	        
	        -- Feature toggles
	        add_slash_command = true,      -- Add /gitcommit slash command
	        add_git_tool = true,          -- Add @{git_read} and @{git_edit} tools
	        enable_git_read = true,       -- Enable read-only Git operations
	        enable_git_edit = true,       -- Enable write-access Git operations
	        enable_git_bot = true,        -- Enable @{git_bot} tool group
	        add_git_commands = true,      -- Add :CodeCompanionGitCommit commands
	        git_tool_auto_submit_errors = false,    -- Auto-submit errors to LLM
	        git_tool_auto_submit_success = true,    -- Auto-submit success to LLM
	        gitcommit_select_count = 100, -- Number of commits shown in /gitcommit
	        
	        -- Commit history context (optional)
	        use_commit_history = true,    -- Enable commit history context
	        commit_history_count = 10,    -- Number of recent commits for context
	      }
	    }
	  }
	})
<

==============================================================================
4. USAGE					*codecompanion-gitcommit-usage*

Basic Usage:

1. Generate commit message: >
	:CodeCompanionGitCommit
<
2. Review the generated commit message in the floating window
3. Choose an action:
   • c - Copy to clipboard
   • y - Copy to yank register
   • s - Submit changes
   • Enter - Copy and close
   • q/Esc - Close

GitCommit Buffer Integration:

1. Run `git commit` to open commit buffer
2. Press `<leader>gc` to generate message (or auto-generates if enabled)
3. Edit as needed and save to complete the commit

Chat-based Git Workflow:

Use Git tools in CodeCompanion chat: >
	@{git_read} status                    # Check repository status
	@{git_edit} stage --files ["file.txt"]  # Stage files
	/gitcommit                          # Generate commit message
	@{git_edit} commit --commit_message "feat(api): add feature"  # Commit
	@{git_edit} push --remote "origin" --branch "main"      # Push
	@{git_read} generate_release_notes    # Generate release notes
	@{ai_release_notes} style:detailed from_tag:v1.0.0 to_tag:v1.1.0  # AI-powered release notes
<

==============================================================================
5. COMMANDS					*codecompanion-gitcommit-commands*

*:CodeCompanionGitCommit*
	Generate Git commit message

*:CCGitCommit*
	Generate Git commit message (short alias)

==============================================================================
6. GIT TOOLS					*codecompanion-gitcommit-git-tools*

Use Git tools in CodeCompanion chat:

Read-only operations (@{git_read}):			*git_read*

• status - Show repository status
• log - Show commit history
• diff - Show file differences
• branch - List branches
• remotes - Show remote repositories
• show - Show commit details
• blame - Show file blame information
• contributors - Show contributors
• search_commits - Search commit messages
• tags - List all tags
• generate_release_notes - Generate release notes between tags
• gitignore_get - Get .gitignore content
• gitignore_check - Check if a file is ignored
• stash_list - List all stashes
• diff_commits - Compare two commits
• help - Show help information

Write operations (@{git_edit}):				*git_edit*

• stage/unstage - Stage/unstage files
• commit - Commit changes (can auto-generate AI commit message)
• create_branch - Create new branch
• checkout - Switch branch/commit
• stash/apply_stash - Stash operations
• reset - Reset to specific commit
• gitignore_add/remove - Manage .gitignore
• push - Push changes to remote repository
• cherry_pick - Cherry-pick commits
• revert - Revert commits
• create_tag/delete_tag - Tag management
• merge - Merge branches

Git bot (@{git_bot}):				*git_bot*

Comprehensive Git assistant that combines read and write operations to provide
intelligent Git workflow assistance.

Available tools:
• git_read - All read-only operations
• git_edit - All write operations  
• ai_release_notes - AI-powered release notes generation

Examples: >
	@{git_read} status
	@{git_read} log --count 5
	@{git_edit} stage --files ["src/main.lua"]
	@{git_edit} create_branch --branch_name "feature/new"
	@{git_edit} commit --commit_message "feat(api): add new feature"
	@{ai_release_notes} style:detailed from_tag:v1.0.0 to_tag:v1.1.0
	@{git_bot} Please help me create a new branch and commit current changes
<

Release Notes Generation:				*release_notes*

The generate_release_notes operation creates formatted release notes between two Git tags by analyzing commit messages. It supports multiple output formats and automatically categorizes commits using Conventional Commits specification.

Usage examples: >
	@{git_read} generate_release_notes
	@{git_read} generate_release_notes --from_tag "v1.0.0" --to_tag "v1.1.0"
	@{git_read} generate_release_notes --release_format "plain"
	@{git_read} generate_release_notes --release_format "json"
<

Features:
• Automatic tag detection (uses latest and second-latest if not specified)
• Enhanced Conventional Commits support (supports scope format like "feat(api):")
• Smart commit categorization (features, fixes, other changes)
• Multiple output formats: markdown (default), plain, json
• Contributors listing with commit counts (sorted by contribution)
• Secure parameter handling with proper escaping
• Performance optimized string operations

Safety features:
• Read-only operations require no confirmation
• Modifying operations require user confirmation
• Repository validation ensures operations in valid Git repositories
• Comprehensive error handling

==============================================================================
7. AI RELEASE NOTES			*codecompanion-gitcommit-ai-release-notes*

The @{ai_release_notes} tool uses AI to generate comprehensive release notes
by analyzing commit history and generating well-formatted, user-friendly
release notes in various styles.

Usage: >
	@{ai_release_notes} style:detailed
	@{ai_release_notes} from_tag:v1.0.0 to_tag:v1.1.0
	@{ai_release_notes} style:concise include_stats:true
<

Parameters:					*ai-release-notes-parameters*

*from_tag*					Type: string (optional)
	Starting tag/version. If not provided, uses the second latest tag.
	Can be a tag name (e.g., "v1.0.0") or commit hash.

*to_tag*					Type: string (optional)
	Ending tag/version. If not provided, uses the latest tag or HEAD.
	Can be a tag name (e.g., "v1.1.0") or "HEAD".

*style*						Type: string (default: "detailed")
	Style of release notes to generate. Available styles:
	• detailed - Comprehensive notes with technical details and migration guides
	• concise - Brief summary of key changes
	• changelog - Developer-focused changelog following Keep a Changelog format
	• marketing - User-friendly marketing release notes

*include_stats*					Type: boolean (default: true)
	Include statistics about changes (number of commits, features, fixes, etc.)

*group_by_type*					Type: boolean (default: true)
	Group commits by conventional commit types (feat, fix, docs, etc.)

Features:					*ai-release-notes-features*
• Automatic tag detection (uses latest and second-latest if not specified)
• Support for Conventional Commits specification
• Smart commit categorization (features, fixes, breaking changes)
• Multiple output styles for different audiences
• Contributors listing with commit counts
• Detailed commit analysis including diffs and statistics
• AI-powered descriptions and summaries

Examples: >
	" Generate detailed release notes between latest two tags
	@{ai_release_notes} style:detailed
	
	" Generate concise marketing release notes
	@{ai_release_notes} style:marketing from_tag:v1.0.0 to_tag:v1.1.0
	
	" Generate changelog with statistics
	@{ai_release_notes} style:changelog include_stats:true
	
	" Generate notes from specific tag to HEAD
	@{ai_release_notes} from_tag:v1.5.0 to_tag:HEAD
<

Style Examples:					*ai-release-notes-styles*

Detailed Style:
	Best for: Technical documentation and comprehensive release notes
	Includes: Full feature descriptions, technical details, migration guides,
	breaking changes, contributor acknowledgments

Concise Style:
	Best for: Quick summaries and changelogs
	Includes: One-line summaries of key changes, minimal technical details

Changelog Style:
	Best for: Developer-focused documentation
	Includes: Conventional commit grouping, technical descriptions,
	commit references, upgrade instructions

Marketing Style:
	Best for: User-facing release announcements
	Includes: Exciting feature descriptions, user benefits,
	non-technical language, emphasis on value

==============================================================================
8. CONFIGURATION				*codecompanion-gitcommit-config*

*adapter*					Type: string
	The LLM adapter to use. If not specified, defaults to the adapter
	configured for CodeCompanion's chat strategy.

*model*						Type: string
	The specific model to use. If not specified, defaults to the model
	configured for CodeCompanion's chat strategy.

*languages*					Type: table
	A list of languages for generating commit messages. When specified,
	the extension will prompt you to select a language before generating.
	Example: { "English", "Chinese", "Japanese", "French" }

*exclude_files*					Type: table
	A list of file patterns to exclude from git diff analysis. Supports
	glob patterns using * and ? wildcards.
	Example: { "*.pb.go", "*.min.js", "dist/*", "node_modules/*" }

*add_slash_command*				Type: boolean, Default: true
	When enabled, adds /gitcommit slash command to CodeCompanion chat buffers.

*add_git_tool*					Type: boolean, Default: true
	When enabled, adds @{git_read} and @{git_edit} tools to CodeCompanion chat buffers.

*enable_git_read*				Type: boolean, Default: true
	Enable read-only Git operations (@{git_read} tool).

*enable_git_edit*				Type: boolean, Default: true
	Enable write-access Git operations (@{git_edit} tool).

*enable_git_bot*				Type: boolean, Default: true
	Enable @{git_bot} tool group. Only takes effect when both enable_git_read 
	and enable_git_edit are true.

*add_git_commands*				Type: boolean, Default: true
	When enabled, adds :CodeCompanionGitCommit and :CCGitCommit commands.

*gitcommit_select_count*			Type: number, Default: 100
	Number of recent commits to show when using /gitcommit slash command.

*git_tool_auto_submit_errors*			Type: boolean, Default: false
	When enabled, automatically submits git tool error messages back to
	the LLM for analysis.

*git_tool_auto_submit_success*			Type: boolean, Default: true
	When enabled, automatically submits git tool success messages back to
	the LLM to continue the workflow.

Buffer configuration:

*buffer.enabled*				Type: boolean, Default: true
	Controls whether gitcommit buffer keymap integration is enabled.

*buffer.keymap*					Type: string, Default: "<leader>gc"
	The keymap used in gitcommit buffers to trigger commit message generation.

*buffer.auto_generate*				Type: boolean, Default: true
	When true, automatically generates commit message upon entering gitcommit buffer.

*buffer.auto_generate_delay*			Type: number, Default: 200
	The delay in milliseconds before triggering automatic generation.

*buffer.skip_auto_generate_on_amend*		Type: boolean, Default: true
	Skip auto-generation during git commit --amend operations.

*use_commit_history*			Type: boolean, Default: true
	When enabled, includes recent commit messages as context for the AI
	to maintain consistency in commit style and patterns.

*commit_history_count*			Type: number, Default: 10
	Number of recent commits to include as context when use_commit_history
	is enabled.

==============================================================================
9. PROGRAMMATIC API				*codecompanion-gitcommit-api*

The extension provides a programmatic API for external integrations:

*gitcommit.exports.generate(lang, callback)*
	Generate commit message programmatically
	Parameters:
	• lang (string|nil): Language to generate commit message in (optional)
	• callback (function): Callback function with signature (result, error)

*gitcommit.exports.is_git_repo()*
	Check if current directory is in a git repository
	Returns: boolean

*gitcommit.exports.get_staged_diff()*
	Get staged changes diff
	Returns: string|nil

*gitcommit.exports.commit_changes(message)*
	Commit changes with provided message
	Parameters:
	• message (string): Commit message
	Returns: boolean

*gitcommit.exports.git_tool*
	Access to git tool functions including status, log, diff, branches,
	stage, unstage, create_branch, checkout, stash operations, reset,
	contributors, search_commits, merge, and more.

*gitcommit.exports.git_tool.generate_release_notes(from_tag, to_tag, format)*
	Generate release notes between tags
	Parameters:
	• from_tag (string|nil): Starting tag (optional)
	• to_tag (string|nil): Ending tag (optional)
	• format (string|nil): Format (markdown, plain, json) (optional)
	Returns: success (boolean), output (string), user_msg (string), llm_msg (string)

Example usage: >
	local gitcommit = require("codecompanion._extensions.gitcommit")
	
	-- Generate commit message
	gitcommit.exports.generate("English", function(result, error)
	  if result then
	    print("Generated:", result)
	  else
	    print("Error:", error)
	  end
	end)
	
	-- Check if in git repo
	if gitcommit.exports.is_git_repo() then
	  print("In git repository")
	end
	
	-- Get git status
	local status = gitcommit.exports.git_tool.status()
	print("Git status:", status)
	
	-- Generate release notes between specific tags
	local success, notes, user_msg, llm_msg = 
	  gitcommit.exports.git_tool.generate_release_notes("v1.0.0", "v1.1.0", "markdown")
	if success then
	  print("Release notes:", notes)
	end
	
	-- Generate release notes (auto-detect latest two tags)
	local success, notes = gitcommit.exports.git_tool.generate_release_notes()
<

==============================================================================
10. LICENSE					*codecompanion-gitcommit-license*

MIT License

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
